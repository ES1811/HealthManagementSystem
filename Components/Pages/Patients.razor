@page "/patients"
@using HealthManagementSystem.Models
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inject HttpClient HttpClient

<PageTitle>Patients</PageTitle>

<div id="form">
    <EditForm Model="@Patient" OnValidSubmit="@Submit" class="mb-3">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label class="form-label">Name</label>
        <InputText @bind-Value="Patient.Name" class="form-control" />
        <ValidationMessage For="@(() => Patient.Name)" />

        <label class="form-label">Email</label>
        <InputText @bind-Value="Patient.Email" class="form-control" />
        <ValidationMessage For="@(() => Patient.Email)" />

        <label class="form-label">Date of Birth</label>
        <InputDate TValue="DateOnly" @bind-Value="Patient.DateOfBirth" class="form-control"/>
        <ValidationMessage For="@(() => Patient.DateOfBirth)" />

        <button type="submit" class="btn btn-primary">Add Patient</button>

    </EditForm>
</div>

@code {
    private Patient Patient = new Patient();
    private async Task Submit()
    {
        Patient.DateOfBirth = DateOnly.FromDateTime(DateTime.Today);

        var response = await HttpClient.PostAsJsonAsync("http://localhost:5293/api/patient", Patient);

        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine("unable to send to backend");
            await JSRuntime.InvokeVoidAsync("console.log", "unable to send to backend");
        }
        else
        {
            Console.WriteLine($"Successfully added {Patient.Name} to the database");
            await JSRuntime.InvokeVoidAsync("console.log", $"Successfully added {Patient.Name} to the database");
        }
    }

}
